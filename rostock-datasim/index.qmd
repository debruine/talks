```{r, include=FALSE}
url <- "https://debruine.github.io/talks/rostock-datasim/"
subtitle <- sprintf("[%s](%s)", url, url)
# make QR code
qrcode::qr_code(url) |> qrcode::generate_svg("images/qrcode.svg")
```
---
title: "Replicability of results"
subtitle: "in the context of private non-sharable data<br><br>`r subtitle`"
author: "Lisa DeBruine  \n![](images/qrcode.svg){width=300}"
format: 
  revealjs:
    logo: images/psyteachr_hex.png
    theme: [dark, style.scss]
    transition: none
    transition-speed: fast
---

# Abstract

```{r, include = FALSE}
library(tidyverse)
library(ggdark)
library(gt)
library(faux)
library(synthpop)

knitr::opts_chunk$set(echo = FALSE)

theme_set(dark_theme_gray(base_size = 17))
faux_options(plot = FALSE)
set.seed(8675309)
```

::: {style="font-size: 24px;"}
Being able to simulate data allows you to prep analysis scripts for pre-registration, calculate power and sensitivity for analyses that donâ€™t have empirical methods, create reproducible examples when your data are too big or confidential to share, enhance your understanding of statistical concepts, and create demo data for teaching and tutorials. This talk will cover the basics of simulation using the R package {faux} to simulate data with factorial designs by specifying the within and between-subjects factor structure, each cell mean and standard deviation, and correlations between cells where appropriate. We will also explore the R package {synthpop}, to simulate data from existing datasets. 
:::

# Why Simulate Data?

## Pre-Registration

![Prep analysis scripts for pre-registration or registered reports](images/lego-registered-reports.png)

## Power

![Calculate power and sensitivity for analyses that don't have empirical methods](images/lego-power-sensitivity.png)

## Reproducible Examples

![Create reproducible examples when your data are too big or confidential to share](images/lego-rainbow.png)

<!-- Pete Linforth/ Pixabay -->

## Enhance Understanding

![Enhance your understanding of statistical or other complex concepts](images/lego-grid.png)

<!-- Stanford Online -->

## Teaching Data

![Create demo data for teaching and tutorials](images/lego-teacher.png)

# Faux 

![](images/faux.png)

[Shiny app](https://rstudio-connect.psy.gla.ac.uk/faux/) or [R package](https://debruine.github.io/faux/)


## Shiny App

::: {#fauxapp .panel-tabset}

### Plot

![](images/faux_plot.png)]

### Data

![](images/faux_data.png)

### Code

![](images/faux_code.png)

:::

## Faux Code

```{r, echo = TRUE}
sim_data <- faux::sim_design(
  within = list(version = c(V1 = "Version 1", V2 = "Version 2"), 
                condition = c(ctl = "Control", exp = "Experimental")),
  between = list(age_group = c(young = "Age 20-29", old = "Age 70-79")),
  n = 30,
  mu = c(100, 100, 100, 100, 100, 90, 110, 110),
  sd = 20,
  r = 0.5,
  dv = c(score = "Score"),
  id = c(id = "Subject ID"),
  vardesc = list(version = "Task Version", 
                 condition = "Experiment Condition", 
                 age_group = "Age Group"),
  long = TRUE
)
```

## Faux Design Parameters

```{r}
# sim_data[c(1, 31, 61, 91, 121, 151, 181, 211), ] |>
get_design(sim_data)$params |>
  gt() |>
  gtExtras::gt_theme_dark(table.font.size = px(20)) |>
  tab_style(style = cell_text(size = px(25)),
            locations = cells_column_labels(everything()))
```


## Faux Design Plot

```{r, echo=TRUE, eval=FALSE}
sim_data |> get_design() |> plot()
```

```{r}
sim_data |> get_design() |> plot() + 
  dark_theme_gray(base_size = 17) +
  coord_cartesian(ylim = c(40, 160))
```

## Faux Data Plot

```{r, echo=TRUE, eval=FALSE}
sim_data |> plot(geoms = c("violin", "pointrangeSE"))
```

```{r}
sim_data |> plot(geoms = c("violin", "pointrangeSE")) + 
  dark_theme_gray(base_size = 17) +
  coord_cartesian(ylim = c(40, 160))
```

## Power Simulation: Replicate Data

```{r, echo = TRUE}
sim_data <- faux::sim_design(
  within = list(version = c(V1 = "Version 1", V2 = "Version 2"), 
                condition = c(ctl = "Control", exp = "Experimental")),
  between = list(age_group = c(young = "Age 20-29", old = "Age 70-79")),
  n = 30,
  mu = c(100, 100, 100, 100, 100, 90, 110, 110),
  sd = 20,
  r = 0.5,
  dv = c(score = "Score"),
  id = c(id = "Subject ID"),
  vardesc = list(version = "Task Version", 
                 condition = "Experiment Condition", 
                 age_group = "Age Group"),
  long = TRUE,
  rep = 100
)
```

## Power Simulation: Analysis Function

```{r, echo = TRUE}
# setup options to avoid annoying afex message & run faster
afex::set_sum_contrasts()
afex::afex_options(include_aov = FALSE) 

analysis_func <- function(data) {
  a <- afex::aov_ez(
    id = "id", 
    dv = "score", 
    between = "age_group",
    within = c("version", "condition"),
    data = data)
  
  as_tibble(a$anova_table, rownames = "term") |>
    rename(p = `Pr(>F)`)
}
```

## Power Simulation: Analysis Result

```{r, echo = TRUE, eval = FALSE}
# test on first data set
analysis_func(sim_data$data[[1]])
```

::: {style="font-size: 90%;"}
```{r}
analysis_func(sim_data$data[[1]]) |>
  gt() |>
  gt::fmt_number(MSE, decimals = 1) |>
  gt::fmt_number(F, decimals = 2) |>
  gt::fmt_number(ges:p, decimals = 3) |>
  gtExtras::gt_theme_dark(table.font.size = px(15)) |>
  tab_style(style = cell_text(size = px(15)),
            locations = cells_column_labels(everything()))
```
:::

## Power Simulation

```{r, echo = TRUE}
power <- sim_data |>
  mutate(analysis = purrr::map(data, analysis_func)) |>
  select(-data) |>
  unnest(analysis) |>
  group_by(term) |>
  summarise(power = mean(p < .05))
```

::: {style="font-size: 80%;"}
```{r}
power |>
  gt() |>
  gtExtras::gt_theme_dark(table.font.size = px(15)) |>
  tab_style(style = cell_text(size = px(20)),
            locations = cells_column_labels(everything()))
```
:::

# SynthPop

:::: {.columns}
::: {.column width="50%"}
![](images/synthpop.png)

[synthpop.org.uk](https://synthpop.org.uk/)

:::
::: {.column width="50%"}

R package and [shiny app](https://synthpop.shinyapps.io/synthpop/) for generating synthetic versions of sensitive microdata for statistical disclosure control. 

:::
::::

## Example Use

:::: {.columns}
::: {.column width="50%"}
![](images/sylls.png)

[SYLLS Synthetic Data](https://sls.lscs.ac.uk/guides-resources/synthetic-data/)
:::
::: {.column width="50%"}
Synthetic data are given only to approved researchers who are granted access to the original sensitive data after signing a disclaimer.

<!--
Researchers are provided with a single synthetic version of a project-specific extract.

Data are labelled appropriately to make it clear that they are synthetic.

Synthetic data are used for preliminary analysis and the development of data cleaning and analysis code.

Final analyses have to be run on the original data.
-->

Substantial costs and time savings related to visits to safe havens by researchers can be made.

:::
::::

## Getting Started

Read in data from the [Scholarly Migration Database](https://www.scholarlymigration.org/data.html)

```{r, echo = TRUE}
file <- "https://raw.githubusercontent.com/MPIDR/Global-flows-and-rates-of-international-migration-of-scholars/master/data_processed/scopus_2024_V1_scholarlymigration_country_enriched.csv"
scholar <- readr::read_csv(file)
scholar_sa <- filter(scholar, region == "South Asia")
head(scholar_sa, 1) |> glimpse()
```


## Codebook.syn

```{r, echo = TRUE}
synthpop::codebook.syn(scholar_sa)$tab
```

## Ready to Synthesise

- Remove identifiers
- Change any character (text) variables into factors
- Include non-NA missing values in `cont.na` argument to `syn()`
- Remove redundant or derivable variables
- Note variables that depend on other variables (set with `rules` and `rvalues` of `syn()`, or manually add after synthesis)
- If >12 variables or any factors with >20 levels, create a smaller and simpler data frame

## Clean Dataset

```{r, echo = TRUE}
scholar2 <- scholar_sa |>
  # remove redundant to countryname
  select(-countrycode, -iso2code, -iso3code, -region) |>
  
  # netmigration = number_of_inmigrations - number_of_outmigrations
  select(-netmigration) |>
  
  # calculated from padded_population_of_researchers
  select(-c(outmigrationrate:netmigrationrate)) |>
  
  # text columns as factors, order incomelevel
  mutate(
    countryname = factor(countryname),
    incomelevel = factor(incomelevel, c("LIC", "LMC", "UMC", "HIC", "INX"))
  )
```

## Simulate Data

```{r, include = FALSE}
scholar_sa_syn <- syn(scholar2)
```

```{r, echo = TRUE, eval = FALSE}
scholar_sa_syn <- syn(scholar2)
summary(scholar_sa_syn)
```

```{r}
summary(scholar_sa_syn)
```

## Check 

```{r, echo = TRUE, eval = FALSE}
compare(scholar_sa_syn, scholar2, stat = "counts")
```


```{r}
sink <- capture.output(
  comp <- compare(scholar_sa_syn, scholar2, stat = "counts")
)
comp$plots[[2]]
```

## Export

```{r, echo = TRUE}
write.syn(scholar_sa_syn, "scholar_sa_syn", filetype = "csv")
```

## Import and Recalculate

```{r, echo = TRUE}
scholar_sa_syn2 <- readr::read_csv(
  file = "scholar_sa_syn.csv",
  col_types = cols(
    incomelevel = col_factor(c("LIC", "LMC", "UMC", "HIC", "INX"))
  )) |>
  mutate(
    netmigration = number_of_inmigrations - number_of_outmigrations,
    outmigrationrate = number_of_outmigrations /
      padded_population_of_researchers,
    inmigrationrate = number_of_inmigrations / 
      padded_population_of_researchers,
    netmigrationrate = inmigrationrate - outmigrationrate
  )
```

## Plot Checks


```{r}
scholar_sa$synth <- "real"
scholar_sa_syn2$synth <- "synthetic"

bind_rows(scholar_sa, scholar_sa_syn2) |>
  ggplot(aes(x = inmigrationrate,
             y = outmigrationrate,
             color = countryname)) +
  scale_x_log10() + geom_point() + facet_wrap(~synth)
```





# Further Resources

:::{layout-nrow=1}

[![PsyPag Simulation Summer School](images/simsummerschool.jpg)](https://simsummerschool.github.io/)

[![Data Simulation Workshops](images/dsw.png)](https://debruine.github.io/data-sim-workshops/)

:::


# Thank You!

:::{layout-nrow=1}

[![`r url`](images/qrcode.svg)](`r url`)

[![psyteachr.github.io](images/psyteachr_hex.png)](https://psyteachr.github.io/)

:::
